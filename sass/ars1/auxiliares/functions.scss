// Pixeles a em
@function em($pixels, $context: 10) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

// Negro con opacidad
@function negro($opacity) {
  @return rgba(black, $opacity);
}

// Blanco con opacidad
@function blanco($opacity) {
  @return rgba(white, $opacity);
}

// Mesclar color con blanco
@function blanquear($color, $porcentage) {
  @return mix(white, $color, $porcentage);
}

// Mesclar color con negro
@function ennegrecer($color, $porcentage) {
  @return mix(black, $color, $porcentage);
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function getColor($nombre, $variante: 'default') {
  $color: map-deep-get($colores, $nombre, $variante);
  @if $color {
    @return $color;
  }
  @else {
    // Libsass still doesn't seem to support @error
    @warn "=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the $material-colors map.";
  }
}

@function pow($number, $exponent) {
  $value: 1;
  @if $exponent>0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }
  @return $value;
}

@function luminance($color) {
  $colors: ( 'red': red($color), 'green': green($color), 'blue': blue($color));
  @each $name,
  $value in $colors {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    }
    @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }
    $colors: map-merge($colors, ($name: $value));
  }
  @return (map-get($colors, 'red') * .2126)+(map-get($colors, 'green') * .7152)+(map-get($colors, 'blue') * .0722);
}